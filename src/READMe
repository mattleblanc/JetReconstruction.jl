Implementing the Valencia Algorithm in Julia:

The valencia algorithm is a variation of the generalized EEkt algorithm. Using the preexisting scaffolding
for jet reconstruction algorithms in JetReconstruction.jl, we were able to seemlesly implement Valencia. This was done by updating the conditionals that make the program run. When called on a set of particles and a specific algorithm name, this program currently performs jet reconstruction on that data and outputs 
parameters describing the resultant jets. We simply needed to updated the functions used in this program to 
take on an extra case under the name "valencia." The main differences in this algorithm are the particle-to-
beam distance calculation and the inter particle distance calculation. 

The particle-to-beam distance (diB) calculation is p(t)^2beta or `diB = E^(2β) * sin(θ)^(2β)`

- Here, E is the energy of the particle, theta is the angle between the particles momentum and beam axis, and beta is a tunable parameter that controls clustering behavior

The interparticle distance (dij) calculation is `dij = min(Ei^(2β), Ej^(2β)) * (1 - cos(θij)) / R^2`

- Here, Ei and Ej are the energies of the two particles, theta is the angle between their momentum vectors, and R is the jet radius parameter


In JetReconstruction.jl:

Updates to EEAlgorithm.jl: 
- The beta parameter was introduced as an argument in the relevant functions (`ee_genkt_algorithm`, `_ee_genkt_algorithm`, and `get_angular_nearest_neighbours!`)
- a default beta value of 1.0 was set for compatability
- the particle-to-beam (diB) and the inter-particle distance (dij) were modified to include the Valencia specific formulas 
- The changes in calculation were wrapped in conditionals only to be used when JetAlgorithm.Valencia is called 

Updates to AlgorithmStrategyEnums.jl:

- The 'JetAlgorithm' enum was updated to include a new case for Valencia

Usage: 
To use the Valencia algorithm for jet reconstruction, specift the algorithm name and optionally provide a value for beta...

"jets = ee_genkt_algorithm(particles; algorithm = JetAlgorithm.Valencia, beta = 1.0, R = 1.0)"



